const bcrypt = require('bcryptjs');
const { firestoreHelpers } = require('../utils/firestore');

// Inicializar datos por defecto en Firestore
async function initializeFirestore() {
  try {
    console.log('üîÑ Inicializando Firestore...');

    // 1. Crear usuario admin por defecto
    const adminExists = await firestoreHelpers.docExists('users', 'admin');
    if (!adminExists) {
      console.log('üë§ Creando usuario admin...');
      const hashedPassword = await bcrypt.hash('admin123', 12);
      
      await firestoreHelpers.createDoc('users', 'admin', {
        username: 'admin',
        email: 'admin@cpc-ugr.es',
        password: hashedPassword,
        role: 'admin',
        isActive: true
      });
      console.log('‚úÖ Usuario admin creado');
    }

    // 2. Crear categor√≠as por defecto
    const categories = await firestoreHelpers.getCollection('content_categories');
    if (categories.length === 0) {
      console.log('üìÇ Creando categor√≠as por defecto...');
      
      const defaultCategories = [
        { 
          id: 'get-started', 
          title: 'GET STARTED', 
          description: 'Primeros pasos en programaci√≥n competitiva', 
          order_index: 0,
          is_active: true
        },
        { 
          id: 'estructuras', 
          title: 'ESTRUCTURAS DE DATOS', 
          description: 'Arrays, listas, √°rboles y m√°s', 
          order_index: 1,
          is_active: true
        },
        { 
          id: 'algoritmos', 
          title: 'ALGORITMOS', 
          description: 'Algoritmos fundamentales', 
          order_index: 2,
          is_active: true
        }
      ];

      for (const category of defaultCategories) {
        await firestoreHelpers.createDoc('content_categories', category.id, category);
      }
      console.log(`‚úÖ ${defaultCategories.length} categor√≠as creadas`);
    }

    // 3. Crear p√°ginas por defecto
    const pages = await firestoreHelpers.getCollection('content_pages');
    if (pages.length === 0) {
      console.log('üìÑ Creando p√°ginas por defecto...');
      
      const defaultPages = [
        { 
          id: 'introduccion', 
          title: 'INTRODUCCI√ìN', 
          description: 'Bienvenida al mundo de la programaci√≥n competitiva', 
          category_id: 'get-started', 
          order_index: 0,
          is_published: true
        },
        { 
          id: 'plataformas', 
          title: 'PLATAFORMAS', 
          description: 'Conoce las principales plataformas de pr√°ctica', 
          category_id: 'get-started', 
          order_index: 1,
          is_published: true
        },
        { 
          id: 'arrays-strings', 
          title: 'ARRAYS Y STRINGS', 
          description: 'Estructuras de datos b√°sicas', 
          category_id: 'estructuras', 
          order_index: 0,
          is_published: true
        },
        { 
          id: 'recursividad', 
          title: 'RECURSIVIDAD', 
          description: 'T√©cnica fundamental de programaci√≥n', 
          category_id: 'algoritmos', 
          order_index: 0,
          is_published: true
        }
      ];

      for (const page of defaultPages) {
        await firestoreHelpers.createDoc('content_pages', page.id, page);
      }
      console.log(`‚úÖ ${defaultPages.length} p√°ginas creadas`);
    }

    // 4. Crear secciones por defecto
    const sections = await firestoreHelpers.getCollection('content_sections');
    if (sections.length === 0) {
      console.log('üìù Creando secciones por defecto...');
      
      const defaultSections = [
        { 
          id: 'intro-bienvenida', 
          page_id: 'introduccion', 
          title: 'Bienvenida al CPC UGR', 
          content: `¬°Bienvenido al Club de Programaci√≥n Competitiva de la Universidad de Granada!

En esta plataforma encontrar√°s todo lo necesario para iniciarte y mejorar en programaci√≥n competitiva:

- **Tutoriales paso a paso** desde nivel b√°sico hasta avanzado
- **Ejercicios pr√°cticos** con evaluaci√≥n autom√°tica
- **Comunidad activa** de estudiantes y mentores
- **Recursos curados** de las mejores fuentes

## ¬øQu√© es la programaci√≥n competitiva?

La programaci√≥n competitiva es una actividad mental que consiste en resolver problemas algor√≠tmicos bajo limitaciones de tiempo. Es como un deporte, pero usando el cerebro y el c√≥digo.

### Beneficios principales:
- Mejora tu capacidad de resoluci√≥n de problemas
- Te prepara para entrevistas t√©cnicas
- Desarrolla tu pensamiento l√≥gico
- Es divertido y adictivo

¬°Empecemos este viaje juntos!`,
          content_type: 'markdown',
          order_index: 0
        },
        { 
          id: 'intro-primeros-pasos', 
          page_id: 'introduccion', 
          title: 'Primeros Pasos', 
          content: `## Tu primer ejercicio

Antes de adentrarnos en teor√≠a compleja, vamos a resolver un problema simple para familiarizarnos con la plataforma.

### Problema: Hello World
Imprime "Hello, Competitive Programming!" en la salida est√°ndar.

**Entrada:** Ninguna
**Salida:** Una l√≠nea con el texto "Hello, Competitive Programming!"

Este es el ejercicio m√°s simple posible, pero te ayudar√° a entender c√≥mo funciona nuestra plataforma de evaluaci√≥n autom√°tica.

> **Consejo:** Aseg√∫rate de que tu salida coincida exactamente con lo esperado, incluyendo may√∫sculas y signos de puntuaci√≥n.`,
          content_type: 'markdown',
          order_index: 1
        },
        { 
          id: 'arrays-introduccion', 
          page_id: 'arrays-strings', 
          title: 'Introducci√≥n a Arrays', 
          content: `## ¬øQu√© son los Arrays?

Un array es una estructura de datos que almacena elementos del mismo tipo en posiciones consecutivas de memoria. Es una de las estructuras m√°s fundamentales en programaci√≥n.

### Caracter√≠sticas importantes:
- **Acceso aleatorio**: Puedes acceder a cualquier elemento en O(1)
- **Tama√±o fijo**: Una vez creado, su tama√±o no cambia
- **√çndices**: Los elementos se acceden mediante √≠ndices (normalmente empezando en 0)

### Ejemplo b√°sico en C++:
\`\`\`cpp
int arr[5] = {1, 2, 3, 4, 5};
cout << arr[0]; // Imprime 1
cout << arr[4]; // Imprime 5
\`\`\`

Los arrays son la base para muchos algoritmos y estructuras de datos m√°s complejas.`,
          content_type: 'markdown',
          order_index: 0
        }
      ];

      for (const section of defaultSections) {
        await firestoreHelpers.createDoc('content_sections', section.id, section);
      }
      console.log(`‚úÖ ${defaultSections.length} secciones creadas`);
    }

    console.log('üéâ Firestore inicializado correctamente!');
  } catch (error) {
    console.error('‚ùå Error inicializando Firestore:', error);
    throw error;
  }
}

module.exports = { initializeFirestore, firestoreHelpers }; 